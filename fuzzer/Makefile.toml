[env]
CARGO_TARGET_DIR = "target"
PROFILE = "release"
PROFILE_DIR = "release"
INCLUDE_DIR = "include"
CC_DIR = "${CARGO_TARGET_DIR}/${PROFILE_DIR}/libafl_cc"
CXX_DIR = "${CARGO_TARGET_DIR}/${PROFILE_DIR}/libafl_cxx"
ZEPHYR_PROJECT_DIR = "../../zephyrproject/zephyr"
ZEPHYR_EXE_DIR = "./${CARGO_TARGET_DIR}/target"
FUZZER_DIR = "./${CARGO_TARGET_DIR}/${PROFILE_DIR}/fuzzer"

[tasks.build_zephyr]
script_runner = "@shell"
script = '''
echo "Testing for changes in zephyr compared to diff file"

DIFF_PATH="$(realpath ../zephyr.diff)"
CUSTOM_TARGET_DIR="$(realpath ${ZEPHYR_EXE_DIR})"
CURRENT_DIR="$(pwd)"

cd ${ZEPHYR_PROJECT_DIR}
git diff > /tmp/zephyr.diff
if diff /tmp/zephyr.diff $DIFF_PATH > /dev/null && [ -f "${CUSTOM_TARGET_DIR}/zephyr/zephyr.exe" ]; then
    echo "\e[33mWarning: Not recompiling Zephyr, no changes compared to ../zephyr.diff\e[0m"
else
    echo "Found changes, recompiling Zephyr"

    . ../.venv/bin/activate

    export ZEPHYR_TOOLCHAIN_VARIANT="llvm"

    west build \
        -b native_sim \
        samples/net/sockets/echo \
        -d "$CUSTOM_TARGET_DIR" \
        ${ZEPHYR_PRISTINE:+--pristine} \
        -- \
        -DEXTRA_CFLAGS="-g -O2 -fsanitize-coverage=trace-pc-guard"
    
    cd $CURRENT_DIR
    echo "Adding changes to git"
    cargo make zephyr_diff
fi
'''

[tasks.build_fuzzer]
command = "cargo"
args = ["build", "--profile", "release"]

[tasks.build_all]
dependencies = ["build_fuzzer", "build_zephyr"]

[tasks.run]
dependencies = ["build_all"]
script_runner = "@shell"
script = '''
${FUZZER_DIR} --zephyr-exec-dir ${ZEPHYR_EXE_DIR}/zephyr/zephyr.exe ${@}
'''

[tasks.zephyr_diff]
script_runner = "@shell"
script = '''
DIFF_PATH="$(realpath ../zephyr.diff)"
cd ${ZEPHYR_PROJECT_DIR}
git diff > "${DIFF_PATH}"
'''

[tasks.extract_pcap]
script_runner = "@shell"
script = '''
counter=0

find corpus -type f -name ".*.metadata" | while read -r metadata_file; do
    base_name=$(basename "$metadata_file" .metadata)
    dir_name=$(dirname "$metadata_file")

    pcap_data=$(grep pcap "$metadata_file" | cut -d\" -f4)

    error_data="for entry #$counter in $metadata_file"

    if test -n "$pcap_data"; then
        echo "$pcap_data" | base64 -d > "${dir_name}/${counter}.pcap"
        if [ ! $? ]; then
            echo "Could not decode and store the pcap file ${error_data}"
            exit 1
        fi
    else
        echo "No pcap data found ${error_data}. Skipping."
    fi

    if test -f "$dir_name/$counter.libafl_lock"; then
        echo "Target file for lock ${counter} already present, skipping ($error_data)"
    elif test -f "$dir_name/$base_name.lafl_lock"; then
        mv "$dir_name/$base_name.lafl_lock" "$dir_name/$counter.lafl_lock"
        if [ ! $? ]; then
            echo "Could not move lock file $error_data"
            exit 1
        fi
    else
        echo "Did not find lock file $error_data"
    fi

    if test -f "$dir_name/$counter.metadata"; then
        echo "Target file for metadata ${counter} already present, skipping ($error_data)"
    elif test -f "$dir_name/$base_name.metadata"; then
        mv "$dir_name/$base_name.metadata" "$dir_name/$counter.metadata"
        if [ ! $? ]; then
            echo "Could not move lock file $error_data"
            exit 1
        fi
    else
        echo "Did not find metadata file $error_data"
    fi

    if test -f "$dir_name/$counter"; then
        echo "Target file for input ${counter} already present, skipping ($error_data)"
    elif test -f "$dir_name/$(echo $base_name | cut -c 2-)"; then
        mv "$dir_name/$(echo $base_name | cut -c 2-)" "$dir_name/$counter"
        if [ ! $? ]; then
            echo "Could not move input file $error_data"
            exit 1
        fi
    else
        echo "Did not find input file $error_data, skipping"
    fi

    counter=$((counter + 1))
done
'''
