diff --git a/drivers/ethernet/eth_native_posix.c b/drivers/ethernet/eth_native_posix.c
index fdd63cced53..b4618fe1132 100644
--- a/drivers/ethernet/eth_native_posix.c
+++ b/drivers/ethernet/eth_native_posix.c
@@ -173,6 +173,16 @@ static int eth_send(const struct device *dev, struct net_pkt *pkt)
 	int count = net_pkt_get_len(pkt);
 	int ret;
 
+	uint8_t* buf = prepare_send_buf(count);
+	while (buf == 0) {
+		k_sleep(K_MSEC(CONFIG_ETH_NATIVE_POSIX_RX_TIMEOUT));
+		buf = prepare_send_buf(count);
+	}
+	ret = net_pkt_read(pkt, buf, count);
+
+	send_buf(count);
+	return ret;
+
 	ret = net_pkt_read(pkt, ctx->send, count);
 	if (ret) {
 		return ret;
@@ -230,7 +240,9 @@ static int read_data(struct eth_context *ctx, int fd)
 	int status;
 	int count;
 
-	count = nsi_host_read(fd, ctx->recv, sizeof(ctx->recv));
+	count = read_incoming(ctx->recv, sizeof(ctx->recv));
+
+	// count = nsi_host_read(fd, ctx->recv, sizeof(ctx->recv));
 	if (count <= 0) {
 		return 0;
 	}
@@ -258,8 +270,8 @@ static void eth_rx(void *p1, void *p2, void *p3)
 	LOG_DBG("Starting ZETH RX thread");
 
 	while (1) {
-		if (net_if_is_up(ctx->iface)) {
-			while (!eth_wait_data(ctx->dev_fd)) {
+		if (is_setup()) {
+			while (incoming_available()) {
 				read_data(ctx, ctx->dev_fd);
 				k_yield();
 			}
@@ -356,7 +368,8 @@ static void eth_iface_init(struct net_if *iface)
 	net_if_set_link_addr(iface, ll_addr->addr, ll_addr->len,
 			     NET_LINK_ETHERNET);
 
-	ctx->dev_fd = eth_iface_create(CONFIG_ETH_NATIVE_POSIX_DEV_NAME, ctx->if_name, false);
+	// ctx->dev_fd = eth_iface_create(CONFIG_ETH_NATIVE_POSIX_DEV_NAME, ctx->if_name, false);
+	init_shmem_eth_interface();
 	if (ctx->dev_fd < 0) {
 		LOG_ERR("Cannot create %s (%d/%s)", ctx->if_name, ctx->dev_fd,
 			strerror(-ctx->dev_fd));
diff --git a/samples/net/sockets/echo/prj.conf b/samples/net/sockets/echo/prj.conf
index 33729784d8e..a3d5c2ad089 100644
--- a/samples/net/sockets/echo/prj.conf
+++ b/samples/net/sockets/echo/prj.conf
@@ -21,3 +21,36 @@ CONFIG_NET_CONFIG_MY_IPV4_ADDR="192.0.2.1"
 CONFIG_NET_CONFIG_PEER_IPV4_ADDR="192.0.2.2"
 CONFIG_NET_CONFIG_MY_IPV6_ADDR="2001:db8::1"
 CONFIG_NET_CONFIG_PEER_IPV6_ADDR="2001:db8::2"
+CONFIG_ETH_NATIVE_POSIX_RANDOM_MAC=n
+CONFIG_ETH_NATIVE_POSIX_MAC_ADDR="02:00:5e:00:53:31"
+# CONFIG_ASAN=y
+
+
+# CONFIG_LOG_BACKEND_FORMAT_TIMESTAMP=y
+# CONFIG_LOG_BACKEND_SHOW_COLOR=y
+# CONFIG_NET_LOG=y
+# CONFIG_NET_PKT_LOG_LEVEL_DBG=y # network layer
+# CONFIG_NET_SOCKETS_LOG_LEVEL_DBG=y
+# CONFIG_NET_TCP_LOG_LEVEL_DBG=y
+# CONFIG_NET_IF_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONFIG_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONNECTION_MANAGER_LOG_LEVEL_DBG=y
+# CONFIG_NET_DHCPV4_LOG_LEVEL_DBG=y
+# CONFIG_NET_DHCPV4_LOG_LEVEL_DBG=y
+# CONFIG_NET_BUF_LOG_LEVEL_DBG=y
+# CONFIG_NET_HOSTNAME_LOG_LEVEL_DBG=y
+# CONFIG_NET_TCP_LOG_LEVEL_DBG=y
+# CONFIG_NET_UDP_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONFIG_LOG_LEVEL_DBG=y
+# CONFIG_NET_MGMT_EVENT_LOG_LEVEL_DBG=y
+# CONFIG_NET_ARP_LOG_LEVEL_DBG=y
+# CONFIG_NET_CORE_LOG_LEVEL_DBG=y
+# CONFIG_NET_IF_LOG_LEVEL_DBG=y
+# CONFIG_NET_UTILS_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONTEXT_LOG_LEVEL_DBG=y
+# CONFIG_NET_PKT_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONN_LOG_LEVEL_DBG=y
+# CONFIG_NET_ROUTE_LOG_LEVEL_DBG=y
+# CONFIG_NET_SOCKETS_LOG_LEVEL_DBG=y
+# CONFIG_NET_TC_LOG_LEVEL_DBG=y
+# CONFIG_ETHERNET_LOG_LEVEL_DBG=y # driver
\ No newline at end of file
diff --git a/samples/net/sockets/echo/src/socket_echo.c b/samples/net/sockets/echo/src/socket_echo.c
index c8aad2bb068..f6202fbff27 100644
--- a/samples/net/sockets/echo/src/socket_echo.c
+++ b/samples/net/sockets/echo/src/socket_echo.c
@@ -19,6 +19,7 @@
 
 #include <zephyr/net/socket.h>
 #include <zephyr/kernel.h>
+#include "nsi_host_trampolines.h"
 
 #endif
 
@@ -35,6 +36,7 @@ int main(void)
 		.sin6_port = htons(BIND_PORT),
 	};
 	static int counter;
+	init_coverage();
 
 	serv = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);
 	if (serv < 0) {
@@ -45,15 +47,12 @@ int main(void)
 	ret = getsockopt(serv, IPPROTO_IPV6, IPV6_V6ONLY, &opt, &optlen);
 	if (ret == 0) {
 		if (opt) {
-			printf("IPV6_V6ONLY option is on, turning it off.\n");
-
 			opt = 0;
 			ret = setsockopt(serv, IPPROTO_IPV6, IPV6_V6ONLY,
 					 &opt, optlen);
 			if (ret < 0) {
 				printf("Cannot turn off IPV6_V6ONLY option\n");
 			} else {
-				printf("Sharing same socket between IPv6 and IPv4\n");
 			}
 		}
 	}
@@ -68,8 +67,8 @@ int main(void)
 		exit(1);
 	}
 
-	printf("Single-threaded TCP echo server waits for a connection on "
-	       "port %d...\n", BIND_PORT);
+	k_sleep(K_MSEC(100)); // wait until all setup code is done, to ensure consistent coverage
+	reset_coverage();
 
 	while (1) {
 		struct sockaddr_in6 client_addr;
@@ -85,7 +84,6 @@ int main(void)
 
 		inet_ntop(client_addr.sin6_family, &client_addr.sin6_addr,
 			  addr_str, sizeof(addr_str));
-		printf("Connection #%d from %s\n", counter++, addr_str);
 
 		while (1) {
 			char buf[128], *p;
@@ -113,7 +111,6 @@ int main(void)
 
 error:
 		close(client);
-		printf("Connection from %s closed\n", addr_str);
 	}
 	return 0;
 }
diff --git a/scripts/native_simulator/common/src/include/nsi_host_trampolines.h b/scripts/native_simulator/common/src/include/nsi_host_trampolines.h
index 31f954ee0cc..36ec7157b78 100644
--- a/scripts/native_simulator/common/src/include/nsi_host_trampolines.h
+++ b/scripts/native_simulator/common/src/include/nsi_host_trampolines.h
@@ -17,11 +17,14 @@
 
 #ifndef NSI_COMMON_SRC_INCL_NSI_HOST_TRAMPOLINES_H
 #define NSI_COMMON_SRC_INCL_NSI_HOST_TRAMPOLINES_H
-
+#include <stdbool.h>
 #ifdef __cplusplus
 extern "C" {
 #endif
 
+// #define MY_LOG(...) printf(__VA_ARGS__);
+#define MY_LOG(...) //
+
 void *nsi_host_calloc(unsigned long nmemb, unsigned long size);
 int nsi_host_close(int fd);
 /* void nsi_host_exit (int status); Use nsi_exit() instead */
@@ -37,6 +40,17 @@ void *nsi_host_realloc(void *ptr, unsigned long size);
 void nsi_host_srandom(unsigned int seed);
 char *nsi_host_strdup(const char *s);
 long nsi_host_write(int fd, const void *buffer, unsigned long size);
+void init_shmem_eth_interface(void);
+void write_shmem(size_t size, const char* buf);
+void close_shmem_eth_interface(void);
+void custom_panic(const char* message);
+void* prepare_send_buf(size_t size);
+void send_buf(size_t size);
+bool is_setup(void);
+int read_incoming(void* buf, unsigned long size);
+bool incoming_available(void);
+void init_coverage(void);
+void reset_coverage(void);
 
 #ifdef __cplusplus
 }
diff --git a/scripts/native_simulator/common/src/nsi_host_trampolines.c b/scripts/native_simulator/common/src/nsi_host_trampolines.c
index eb378b7533f..352e9488cbe 100644
--- a/scripts/native_simulator/common/src/nsi_host_trampolines.c
+++ b/scripts/native_simulator/common/src/nsi_host_trampolines.c
@@ -10,6 +10,15 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <string.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <fcntl.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <stdbool.h>
+#include "nsi_host_trampolines.h"
+#include <dlfcn.h>
+
 
 void *nsi_host_calloc(unsigned long nmemb, unsigned long size)
 {
@@ -75,3 +84,203 @@ long nsi_host_write(int fd, const void *buffer, unsigned long size)
 {
 	return write(fd, buffer, size);
 }
+
+void custom_panic(const char* message) {
+	fprintf(stderr, "PANIC in zephyr: %s\n", message);
+	// int* ptr = 0;
+	// *ptr = 0;
+	exit(1);
+}
+
+static int net_shmem_fd = 0;
+static bool net_shmem_init = false;
+static char* net_shmem_name = 0;
+static size_t net_shmem_size = -1;
+static int32_t* net_shmem_ptr_rx = 0;
+static int32_t* net_shmem_ptr_tx = 0;
+
+void init_shmem_eth_interface(void) {
+	MY_LOG("init_shmem_eth_interface\n");
+	if (!net_shmem_init) {
+		MY_LOG("init_shmem_eth_interface: initializing\n");
+		net_shmem_init = true;
+		net_shmem_name = getenv("SHMEM_ETH_INTERFACE_NAME");
+		if (net_shmem_name == 0) custom_panic("SHMEM_ETH_INTERFACE_NAME, the path to the mmap based shmem, is not set in the env");
+		MY_LOG("shmem name: %s\n", net_shmem_name);
+
+		char* net_shmem_size_str = getenv("SHMEM_ETH_INTERFACE_SIZE");
+		if (net_shmem_size_str == 0) custom_panic("SHMEM_ETH_INTERFACE_SIZE, the size of the mmap based shmem, is not set in the env");
+		MY_LOG("shmem size: %s\n", net_shmem_size_str);
+
+		net_shmem_size = atoi(net_shmem_size_str);
+
+		// Open shared memory object
+		net_shmem_fd = shm_open(net_shmem_name, O_CREAT | O_RDWR, 0666);
+		if (net_shmem_fd == -1) custom_panic("shm_open broke");
+
+		// Configure the size of the shared memory object
+		ftruncate(net_shmem_fd, net_shmem_size);
+
+		// Memory map the shared memory object
+		char* raw_ptr = mmap(0, net_shmem_size, PROT_READ | PROT_WRITE, MAP_SHARED, net_shmem_fd, 0);
+		if (raw_ptr == MAP_FAILED) custom_panic("mmap broke");
+		net_shmem_ptr_rx = (int32_t*) raw_ptr;
+		net_shmem_ptr_tx = (int32_t*) (raw_ptr + net_shmem_size / 2);
+		// printf("Initialized shmem for the eth interface of size %u at %s", net_shmem_size, net_shmem_name);
+	} else {
+		printf("Warning: Calling init_shmem_eth_interface again\n");
+	}
+	MY_LOG("states at startup: tx %d, rx: %d\n", *net_shmem_ptr_tx, *net_shmem_ptr_rx);
+	MY_LOG("/init_shmem_eth_interface\n");
+}
+
+// void write_shmem(size_t size, const char* buf) {
+// 	if (!net_shmem_init) custom_panic("Not initialized");
+// 	int* shmem_int = (int*) ((int32_t *) net_shmem_ptr_rx);
+// 	size_t iter = 0;
+// 	while (*shmem_int != 0) if (iter++ > (1 << 0)) custom_panic("Not ready");
+// 	*(shmem_int) = 2; // sender = zephyr
+// 	*(shmem_int + 1) = size; 
+// 	char* shmem_char = (char*)(shmem_int + 2);
+// 	memcpy(shmem_char, buf, size);
+// }
+
+// void close_shmem_eth_interface(void) {
+// 	munmap(net_shmem_ptr_rx, net_shmem_size);
+//     close(net_shmem_fd);
+//     shm_unlink(net_shmem_name);   // Unlink the shared memory object when done
+// }
+
+void* prepare_send_buf(size_t size) {
+	if (!net_shmem_init)
+		custom_panic("Not initialized");
+
+	if (size > (net_shmem_size / 2 - 4)) // size needs to fit in half the shmem minus the length of the length field
+		custom_panic("Attempting to send a frame too large");
+
+
+	if ((*net_shmem_ptr_tx) >= 0) { // shmem[0] >= 0 means there is still a packet in the buffer
+		// MY_LOG("buffer not ready, remaining size: %d\n", *net_shmem_ptr_tx);
+		return 0;
+	}
+
+	MY_LOG("prepared_send_buf\n");;
+	
+	return net_shmem_ptr_tx + 1;
+}
+
+void send_buf(size_t size) {
+	MY_LOG("send_buf\n");
+	*net_shmem_ptr_tx = size; // set as sent
+	MY_LOG("/send_buf\n");
+}
+
+bool is_setup(void) {
+	return net_shmem_init;
+}
+
+int read_incoming(void* buf, unsigned long size) {
+	if (!net_shmem_init)
+		custom_panic("Not initialized");
+	
+	int32_t incoming_size = *net_shmem_ptr_rx;
+
+	if (incoming_size < 0) // if no package was sent in this direction
+		return -1;
+		
+	MY_LOG("read_incoming\n");
+	if (incoming_size > size) // assuming the fuzzer checks sizes, this should be enough checks
+		custom_panic("Incoming too large");
+	
+	void* res = memcpy(buf, (net_shmem_ptr_rx + 1), incoming_size);
+	if (res == 0)
+		custom_panic("Could not copy received data");
+	
+	*net_shmem_ptr_rx = -1; // status = ready
+	MY_LOG("read %d %p %d\n", incoming_size, (void*)net_shmem_ptr_rx, *net_shmem_ptr_rx);
+	MY_LOG("/read_incoming\n");
+	
+	return incoming_size;
+}
+
+bool incoming_available(void) {
+	if (!net_shmem_init)
+		custom_panic("Not initialized");
+
+	return (*net_shmem_ptr_rx) >= 0;
+}
+
+static int cov_shmem_fd = 0;
+static bool cov_shmem_init = false;
+static char *cov_shmem_name = 0;
+static size_t cov_shmem_size = -1;
+static uint32_t *cov_shmem_ptr = 0;
+static uint32_t *guard_stop = 0;
+static uint32_t *guard_start = 0;
+
+void init_coverage(void) {
+	MY_LOG("init_coverage\n");
+	if (!cov_shmem_init) {
+		MY_LOG("init_coverage: initializing\n");
+		cov_shmem_init = true;
+		cov_shmem_name = getenv("SHMEM_COVERAGE_NAME");
+		if (cov_shmem_name == 0) custom_panic("SHMEM_COVERAGE_NAME, the path to the mmap based shmem, is not set in the env");
+		MY_LOG("shmem name: %s\n", cov_shmem_name);
+
+		char* cov_shmem_size_str = getenv("SHMEM_COVERAGE_SIZE");
+		if (cov_shmem_size_str == 0) custom_panic("SHMEM_COVERAGE_SIZE, the size of the mmap based shmem, is not set in the env");
+		MY_LOG("shmem size: %s\n", cov_shmem_size_str);
+
+		cov_shmem_size = atoi(cov_shmem_size_str);
+		if (guard_stop == 0) custom_panic("Coverage guards not initialized when initing coverage shmem");
+		uint32_t required_size = (guard_stop - guard_start) * 4;
+		if (cov_shmem_size != required_size) {
+			printf("Received shmem of size %d, needed shmem of size %d\n", cov_shmem_size, required_size);
+			custom_panic("Coverage shared memory has wrong size.");
+		}
+
+		// Open shared memory object
+		cov_shmem_fd = shm_open(cov_shmem_name, O_CREAT | O_RDWR, 0666);
+		if (cov_shmem_fd == -1) custom_panic("shm_open broke");
+
+		// Configure the size of the shared memory object
+		ftruncate(cov_shmem_fd, cov_shmem_size);
+
+		// Memory map the shared memory object
+		cov_shmem_ptr = mmap(0, cov_shmem_size, PROT_READ | PROT_WRITE, MAP_SHARED, cov_shmem_fd, 0);
+		if (cov_shmem_ptr == MAP_FAILED) custom_panic("mmap broke");
+	} else {
+		printf("Warning: Calling init_coverage again\n");
+	}
+}
+
+void reset_coverage(void) {
+	if (!cov_shmem_init)
+		custom_panic("attempting to reset non-initialized coverage shmem");
+	memset(cov_shmem_ptr, 0, cov_shmem_size);
+}
+
+
+void __sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop)
+{
+  if (start == stop)
+  {
+    MY_LOG("Skipping initialization");
+    return;
+  };
+
+
+  MY_LOG("Coverage initialization");
+  guard_start = start;
+  guard_stop = stop;
+
+  memset(guard_start, 0, guard_stop - guard_start);
+
+  MY_LOG("Done with initialization\n");
+}
+
+void __sanitizer_cov_trace_pc_guard(uint32_t *guard)
+{
+	if (!cov_shmem_init) return; // ignore coverage before initialization
+	*(guard - guard_start + cov_shmem_ptr) += 1;
+}
