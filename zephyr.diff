diff --git a/drivers/ethernet/eth_native_posix.c b/drivers/ethernet/eth_native_posix.c
index fdd63cced53..a2986c08d29 100644
--- a/drivers/ethernet/eth_native_posix.c
+++ b/drivers/ethernet/eth_native_posix.c
@@ -169,10 +169,31 @@ static void update_gptp(struct net_if *iface, struct net_pkt *pkt,
 
 static int eth_send(const struct device *dev, struct net_pkt *pkt)
 {
+	// MY_LOG("eth_send\n");
 	struct eth_context *ctx = dev->data;
 	int count = net_pkt_get_len(pkt);
+	// MY_LOG("eth_send: got length\n");
 	int ret;
 
+	uint8_t* buf = prepare_send_buf(count);
+	while (buf == 0) {
+		// MY_LOG("could not prep send buf\n");
+		k_sleep(K_MSEC(CONFIG_ETH_NATIVE_POSIX_RX_TIMEOUT));
+		buf = prepare_send_buf(count);
+	}
+	MY_LOG("eth_send: prep send buf\n");
+	ret = net_pkt_read(pkt, buf, count);
+	MY_LOG("eth_send: read pkt\n");
+
+	// printf("Send len %d: \"", count);
+	// for (int i = 0; i < count; i++)
+	// 	printf("%02x", send_buf[i]);
+	// printf("\"\n");
+	send_buf(count);
+	MY_LOG("eth_send: sent pkt\n");
+	MY_LOG("/eth_send\n");
+	return ret;
+
 	ret = net_pkt_read(pkt, ctx->send, count);
 	if (ret) {
 		return ret;
@@ -225,27 +246,33 @@ static struct net_pkt *prepare_pkt(struct eth_context *ctx,
 
 static int read_data(struct eth_context *ctx, int fd)
 {
+
 	struct net_if *iface = ctx->iface;
 	struct net_pkt *pkt = NULL;
 	int status;
 	int count;
 
-	count = nsi_host_read(fd, ctx->recv, sizeof(ctx->recv));
+	count = read_incoming(ctx->recv, sizeof(ctx->recv));
+
+	// count = nsi_host_read(fd, ctx->recv, sizeof(ctx->recv));
 	if (count <= 0) {
 		return 0;
 	}
+	MY_LOG("read_data\n");
 
 	pkt = prepare_pkt(ctx, count, &status);
 	if (!pkt) {
 		return status;
+		MY_LOG("Error: read_data, could not prepare pkt\n");
 	}
 
 	update_gptp(iface, pkt, false);
 
 	if (net_recv_data(iface, pkt) < 0) {
 		net_pkt_unref(pkt);
+		MY_LOG("Error: read_data, did not recv data\n");
 	}
-
+	MY_LOG("/read_data\n");
 	return 0;
 }
 
@@ -258,13 +285,12 @@ static void eth_rx(void *p1, void *p2, void *p3)
 	LOG_DBG("Starting ZETH RX thread");
 
 	while (1) {
-		if (net_if_is_up(ctx->iface)) {
-			while (!eth_wait_data(ctx->dev_fd)) {
+		if (is_setup()) {
+			while (incoming_available()) {
 				read_data(ctx, ctx->dev_fd);
 				k_yield();
 			}
 		}
-
 		k_sleep(K_MSEC(CONFIG_ETH_NATIVE_POSIX_RX_TIMEOUT));
 	}
 }
@@ -356,7 +382,8 @@ static void eth_iface_init(struct net_if *iface)
 	net_if_set_link_addr(iface, ll_addr->addr, ll_addr->len,
 			     NET_LINK_ETHERNET);
 
-	ctx->dev_fd = eth_iface_create(CONFIG_ETH_NATIVE_POSIX_DEV_NAME, ctx->if_name, false);
+	// ctx->dev_fd = eth_iface_create(CONFIG_ETH_NATIVE_POSIX_DEV_NAME, ctx->if_name, false);
+	init_shmem_eth_interface();
 	if (ctx->dev_fd < 0) {
 		LOG_ERR("Cannot create %s (%d/%s)", ctx->if_name, ctx->dev_fd,
 			strerror(-ctx->dev_fd));
@@ -364,6 +391,10 @@ static void eth_iface_init(struct net_if *iface)
 		/* Create a thread that will handle incoming data from host */
 		create_rx_handler(ctx);
 	}
+
+	char* a = net_if_get_link_addr(iface)->addr;
+	printf("My mac addr: [%x:%x:%x:%x:%x:%x]\n", a[0], a[1], a[2], a[3], a[4], a[5]);
+
 }
 
 static
diff --git a/samples/net/sockets/echo/prj.conf b/samples/net/sockets/echo/prj.conf
index 33729784d8e..8464bd2ba99 100644
--- a/samples/net/sockets/echo/prj.conf
+++ b/samples/net/sockets/echo/prj.conf
@@ -21,3 +21,35 @@ CONFIG_NET_CONFIG_MY_IPV4_ADDR="192.0.2.1"
 CONFIG_NET_CONFIG_PEER_IPV4_ADDR="192.0.2.2"
 CONFIG_NET_CONFIG_MY_IPV6_ADDR="2001:db8::1"
 CONFIG_NET_CONFIG_PEER_IPV6_ADDR="2001:db8::2"
+CONFIG_ETH_NATIVE_POSIX_RANDOM_MAC=n
+CONFIG_ETH_NATIVE_POSIX_MAC_ADDR="02:00:5e:00:53:31"
+
+
+# CONFIG_LOG_BACKEND_FORMAT_TIMESTAMP=y
+# CONFIG_LOG_BACKEND_SHOW_COLOR=y
+# CONFIG_NET_LOG=y
+# CONFIG_NET_PKT_LOG_LEVEL_DBG=y # network layer
+# CONFIG_NET_SOCKETS_LOG_LEVEL_DBG=y
+# CONFIG_NET_TCP_LOG_LEVEL_DBG=y
+# CONFIG_NET_IF_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONFIG_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONNECTION_MANAGER_LOG_LEVEL_DBG=y
+# CONFIG_NET_DHCPV4_LOG_LEVEL_DBG=y
+# CONFIG_NET_DHCPV4_LOG_LEVEL_DBG=y
+# CONFIG_NET_BUF_LOG_LEVEL_DBG=y
+# CONFIG_NET_HOSTNAME_LOG_LEVEL_DBG=y
+# CONFIG_NET_TCP_LOG_LEVEL_DBG=y
+# CONFIG_NET_UDP_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONFIG_LOG_LEVEL_DBG=y
+# CONFIG_NET_MGMT_EVENT_LOG_LEVEL_DBG=y
+# CONFIG_NET_ARP_LOG_LEVEL_DBG=y
+# CONFIG_NET_CORE_LOG_LEVEL_DBG=y
+# CONFIG_NET_IF_LOG_LEVEL_DBG=y
+# CONFIG_NET_UTILS_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONTEXT_LOG_LEVEL_DBG=y
+# CONFIG_NET_PKT_LOG_LEVEL_DBG=y
+# CONFIG_NET_CONN_LOG_LEVEL_DBG=y
+# CONFIG_NET_ROUTE_LOG_LEVEL_DBG=y
+# CONFIG_NET_SOCKETS_LOG_LEVEL_DBG=y
+# CONFIG_NET_TC_LOG_LEVEL_DBG=y
+# CONFIG_ETHERNET_LOG_LEVEL_DBG=y # driver
\ No newline at end of file
diff --git a/samples/net/sockets/echo/src/socket_echo.c b/samples/net/sockets/echo/src/socket_echo.c
index c8aad2bb068..94343f00a6d 100644
--- a/samples/net/sockets/echo/src/socket_echo.c
+++ b/samples/net/sockets/echo/src/socket_echo.c
@@ -17,15 +17,18 @@
 
 #else
 
+#include "nsi_host_trampolines.h"
 #include <zephyr/net/socket.h>
 #include <zephyr/kernel.h>
+#include <stdbool.h>
 
 #endif
 
 #define BIND_PORT 4242
 
-int main(void)
-{
+void nsi_exit(int exit_code); // from arch/posix/core/nsi_compat
+
+int main(void) {
 	int opt;
 	socklen_t optlen = sizeof(int);
 	int serv, ret;
@@ -45,7 +48,7 @@ int main(void)
 	ret = getsockopt(serv, IPPROTO_IPV6, IPV6_V6ONLY, &opt, &optlen);
 	if (ret == 0) {
 		if (opt) {
-			printf("IPV6_V6ONLY option is on, turning it off.\n");
+			// printf("IPV6_V6ONLY option is on, turning it off.\n");
 
 			opt = 0;
 			ret = setsockopt(serv, IPPROTO_IPV6, IPV6_V6ONLY,
@@ -53,7 +56,7 @@ int main(void)
 			if (ret < 0) {
 				printf("Cannot turn off IPV6_V6ONLY option\n");
 			} else {
-				printf("Sharing same socket between IPv6 and IPv4\n");
+				// printf("Sharing same socket between IPv6 and IPv4\n");
 			}
 		}
 	}
@@ -68,8 +71,8 @@ int main(void)
 		exit(1);
 	}
 
-	printf("Single-threaded TCP echo server waits for a connection on "
-	       "port %d...\n", BIND_PORT);
+	// printf("Single-threaded TCP echo server waits for a connection on "
+	//        "port %d...\n", BIND_PORT);
 
 	while (1) {
 		struct sockaddr_in6 client_addr;
@@ -85,7 +88,7 @@ int main(void)
 
 		inet_ntop(client_addr.sin6_family, &client_addr.sin6_addr,
 			  addr_str, sizeof(addr_str));
-		printf("Connection #%d from %s\n", counter++, addr_str);
+		MY_LOG("Connection #%d from %s\n", counter++, addr_str);
 
 		while (1) {
 			char buf[128], *p;
@@ -113,7 +116,8 @@ int main(void)
 
 error:
 		close(client);
-		printf("Connection from %s closed\n", addr_str);
+		MY_LOG("Connection from %s closed\n", addr_str);
+		nsi_exit(0);
 	}
 	return 0;
 }
diff --git a/scripts/native_simulator/common/src/include/nsi_host_trampolines.h b/scripts/native_simulator/common/src/include/nsi_host_trampolines.h
index 31f954ee0cc..72a6bf17ec6 100644
--- a/scripts/native_simulator/common/src/include/nsi_host_trampolines.h
+++ b/scripts/native_simulator/common/src/include/nsi_host_trampolines.h
@@ -17,11 +17,14 @@
 
 #ifndef NSI_COMMON_SRC_INCL_NSI_HOST_TRAMPOLINES_H
 #define NSI_COMMON_SRC_INCL_NSI_HOST_TRAMPOLINES_H
-
+#include <stdbool.h>
 #ifdef __cplusplus
 extern "C" {
 #endif
 
+// #define MY_LOG(...) printf(__VA_ARGS__);
+#define MY_LOG(...) //
+
 void *nsi_host_calloc(unsigned long nmemb, unsigned long size);
 int nsi_host_close(int fd);
 /* void nsi_host_exit (int status); Use nsi_exit() instead */
@@ -37,6 +40,15 @@ void *nsi_host_realloc(void *ptr, unsigned long size);
 void nsi_host_srandom(unsigned int seed);
 char *nsi_host_strdup(const char *s);
 long nsi_host_write(int fd, const void *buffer, unsigned long size);
+void init_shmem_eth_interface(void);
+void write_shmem(size_t size, const char* buf);
+void close_shmem_eth_interface(void);
+void custom_panic(const char* message);
+void* prepare_send_buf(size_t size);
+void send_buf(size_t size);
+bool is_setup(void);
+int read_incoming(void* buf, unsigned long size);
+bool incoming_available(void);
 
 #ifdef __cplusplus
 }
diff --git a/scripts/native_simulator/common/src/nsi_host_trampolines.c b/scripts/native_simulator/common/src/nsi_host_trampolines.c
index eb378b7533f..15734754332 100644
--- a/scripts/native_simulator/common/src/nsi_host_trampolines.c
+++ b/scripts/native_simulator/common/src/nsi_host_trampolines.c
@@ -10,6 +10,15 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <string.h>
+#include <stdio.h>
+#include <fcntl.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <stdbool.h>
+#include "nsi_host_trampolines.h"
+#include <time.h>
+#include <dlfcn.h>
+
 
 void *nsi_host_calloc(unsigned long nmemb, unsigned long size)
 {
@@ -75,3 +84,127 @@ long nsi_host_write(int fd, const void *buffer, unsigned long size)
 {
 	return write(fd, buffer, size);
 }
+
+void custom_panic(const char* message) {
+	fprintf(stderr, "PANIC in zephyr: %s\n", message);
+	int* ptr = 0;
+	*ptr = 0;
+}
+
+static int shmem_fd = 0;
+static bool shmem_init = false;
+static char* shmem_name = 0;
+static size_t shmem_size = -1;
+static int32_t* shmem_ptr_rx = 0;
+static int32_t* shmem_ptr_tx = 0;
+
+void init_shmem_eth_interface(void) {
+	MY_LOG("init_shmem_eth_interface\n");
+	if (!shmem_init) {
+		MY_LOG("init_shmem_eth_interface: initializing\n");
+		shmem_init = true;
+		shmem_name = getenv("SHMEM_ETH_INTERFACE_NAME");
+		if (shmem_name == 0) custom_panic("SHMEM_ETH_INTERFACE_NAME, the path to the mmap based shmem, is not set in the env");
+		MY_LOG("shmem name: %s\n", shmem_name);
+
+		char* shmem_size_str = getenv("SHMEM_ETH_INTERFACE_SIZE");
+		if (shmem_size_str == 0) custom_panic("SHMEM_ETH_INTERFACE_SIZE, the size of the mmap based shmem, is not set in the env");
+		MY_LOG("shmem size: %s\n", shmem_size_str);
+
+		shmem_size = atoi(shmem_size_str);
+
+		// Open shared memory object
+		shmem_fd = shm_open(shmem_name, O_CREAT | O_RDWR, 0666);
+		if (shmem_fd == -1) custom_panic("shm_open broke");
+
+		// Configure the size of the shared memory object
+		ftruncate(shmem_fd, shmem_size);
+
+		// Memory map the shared memory object
+		char* raw_ptr = mmap(0, shmem_size, PROT_READ | PROT_WRITE, MAP_SHARED, shmem_fd, 0);
+		if (raw_ptr == MAP_FAILED) custom_panic("mmap broke");
+		shmem_ptr_rx = (int32_t*) raw_ptr;
+		shmem_ptr_tx = (int32_t*) (raw_ptr + shmem_size / 2);
+		// printf("Initialized shmem for the eth interface of size %u at %s", shmem_size, shmem_name);
+	} else {
+		printf("Warning: Calling init_shmem_eth_interface again\n");
+	}
+	MY_LOG("states at startup: tx %d, rx: %d\n", *shmem_ptr_tx, *shmem_ptr_rx);
+	MY_LOG("/init_shmem_eth_interface\n");
+}
+
+// void write_shmem(size_t size, const char* buf) {
+// 	if (!shmem_init) custom_panic("Not initialized");
+// 	int* shmem_int = (int*) ((int32_t *) shmem_ptr_rx);
+// 	size_t iter = 0;
+// 	while (*shmem_int != 0) if (iter++ > (1 << 0)) custom_panic("Not ready");
+// 	*(shmem_int) = 2; // sender = zephyr
+// 	*(shmem_int + 1) = size; 
+// 	char* shmem_char = (char*)(shmem_int + 2);
+// 	memcpy(shmem_char, buf, size);
+// }
+
+// void close_shmem_eth_interface(void) {
+// 	munmap(shmem_ptr_rx, shmem_size);
+//     close(shmem_fd);
+//     shm_unlink(shmem_name);   // Unlink the shared memory object when done
+// }
+
+void* prepare_send_buf(size_t size) {
+	if (!shmem_init)
+		custom_panic("Not initialized");
+
+	if (size > (shmem_size / 2 - 4)) // size needs to fit in half the shmem minus the length of the length field
+		custom_panic("Attempting to send a frame too large");
+
+
+	if ((*shmem_ptr_tx) >= 0) { // shmem[0] >= 0 means there is still a packet in the buffer
+		// MY_LOG("buffer not ready, remaining size: %d\n", *shmem_ptr_tx);
+		return 0;
+	}
+
+	MY_LOG("prepared_send_buf\n");;
+	
+	return shmem_ptr_tx + 1;
+}
+
+void send_buf(size_t size) {
+	MY_LOG("send_buf\n");
+	*shmem_ptr_tx = size; // set as sent
+	MY_LOG("/send_buf\n");
+}
+
+bool is_setup(void) {
+	return shmem_init;
+}
+
+int read_incoming(void* buf, unsigned long size) {
+	if (!shmem_init)
+		custom_panic("Not initialized");
+	
+	int32_t incoming_size = *shmem_ptr_rx;
+
+	if (incoming_size < 0) // if no package was sent in this direction
+		return -1;
+		
+	MY_LOG("read_incoming\n");
+	if (incoming_size > size) // assuming the fuzzer checks sizes, this should be enough checks
+		custom_panic("Incoming too large");
+	
+	void* res = memcpy(buf, (shmem_ptr_rx + 1), incoming_size);
+	if (res == 0)
+		custom_panic("Could not copy received data");
+	
+	*shmem_ptr_rx = -1; // status = ready
+	MY_LOG("read %d %p %d\n", incoming_size, (void*)shmem_ptr_rx, *shmem_ptr_rx);
+	MY_LOG("/read_incoming\n");
+	
+	return incoming_size;
+}
+
+bool incoming_available(void) {
+	if (!shmem_init)
+		custom_panic("Not initialized");
+
+	return (*shmem_ptr_rx) >= 0;
+}
\ No newline at end of file
diff --git a/subsys/net/ip/net_core.c b/subsys/net/ip/net_core.c
index 8ab2fb93a3c..f5d64610cfa 100644
--- a/subsys/net/ip/net_core.c
+++ b/subsys/net/ip/net_core.c
@@ -508,16 +508,19 @@ int net_recv_data(struct net_if *iface, struct net_pkt *pkt)
 	SYS_PORT_TRACING_FUNC_ENTER(net, recv_data, iface, pkt);
 
 	if (!pkt || !iface) {
+		NET_DBG("Error: No packet or interface");
 		ret = -EINVAL;
 		goto err;
 	}
 
 	if (net_pkt_is_empty(pkt)) {
+		NET_DBG("Error: Empty packet");
 		ret = -ENODATA;
 		goto err;
 	}
 
 	if (!net_if_flag_is_set(iface, NET_IF_UP)) {
+		NET_DBG("Error: Network interface flag not set");
 		ret = -ENETDOWN;
 		goto err;
 	}
diff --git a/subsys/net/ip/net_if.c b/subsys/net/ip/net_if.c
index 0d0248158f7..d1d55c01540 100644
--- a/subsys/net/ip/net_if.c
+++ b/subsys/net/ip/net_if.c
@@ -470,6 +470,7 @@ enum net_verdict net_if_send_data(struct net_if *iface, struct net_pkt *pkt)
 		if (l2 == NULL) {
 			/* Offloaded ifaces may choose not to use an L2 at all. */
 			NET_WARN("no l2 for iface %p, discard pkt", iface);
+			// printf("no l2 for iface %p, discard pkt", iface);
 			verdict = NET_DROP;
 			goto done;
 		} else if (l2->send == NULL) {
@@ -477,6 +478,7 @@ enum net_verdict net_if_send_data(struct net_if *iface, struct net_pkt *pkt)
 			 * might simply not implement send.
 			 */
 			NET_WARN("l2 for iface %p cannot send, discard pkt", iface);
+			// printf("l2 for iface %p cannot send, discard pkt", iface);
 			verdict = NET_DROP;
 			goto done;
 		}
