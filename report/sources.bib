@unpublished{EVA,
  author = {Valentin Huber},
  title  = {{Challenges and Mitigation Strategies in Symbolic Execution Based Fuzzing Through the Lens of Survey Papers}},
  year   = {2023},
  month  = {12},
  day    = {15},
  url    = {https://github.com/riesentoaster/review-symbolic-execution-in-fuzzing/releases/download/v1.0/Huber-Valentin-Challenges-and-Mitigation-Strategies-in-Symbolic-Execution-Based-Fuzzing-Through-the-Lens-of-Survey-Papers.pdf}
}

@unpublished{VT1,
  author = {Valentin Huber},
  title  = {{Running KLEE on GNU coreutils}},
  year   = {2024},
  month  = {02},
  day    = {13},
  url    = {https://github.com/riesentoaster/klee-coreutils-experiments/releases/download/v1.0/Huber-Valentin-running-KLEE-on-coreutils-report.pdf}
}
@unpublished{VT2,
  author = {Valentin Huber},
  title  = {{Differential Fuzzing on coreutils Using LibAFL}},
  year   = {2024},
  month  = {06},
  day    = {25},
  url    = {https://github.com/riesentoaster/coreutils-differential-fuzzing/blob/main/report/out/index.pdf}
}

@inproceedings{StatefulGreybox,
  author    = {Jinsheng Ba and Marcel B{\"o}hme and Zahra Mirzamomen and Abhik Roychoudhury},
  title     = {Stateful Greybox Fuzzing},
  booktitle = {31st USENIX Security Symposium (USENIX Security 22)},
  year      = {2022},
  isbn      = {978-1-939133-31-1},
  address   = {Boston, MA},
  pages     = {3255--3272},
  url       = {https://www.usenix.org/conference/usenixsecurity22/presentation/ba},
  publisher = {USENIX Association},
  month     = aug
}


@article{StateAFL,
  author   = {Natella, Roberto},
  title    = {StateAFL: Greybox fuzzing for stateful network servers},
  journal  = {Empirical Software Engineering},
  year     = {2022},
  month    = {10},
  day      = {04},
  volume   = {27},
  number   = {7},
  pages    = {191},
  abstract = {Fuzzing network servers is a technical challenge, since the behavior of the target server depends on its state over a sequence of multiple messages. Existing solutions are costly and difficult to use, as they rely on manually-customized artifacts such as protocol models, protocol parsers, and learning frameworks. The aim of this work is to develop a greybox fuzzer (StateAFL) for network servers that only relies on lightweight analysis of the target program, with no manual customization, in a similar way to what the AFL fuzzer achieved for stateless programs. The proposed fuzzer instruments the target server at compile-time, to insert probes on memory allocations and network I/O operations. At run-time, it infers the current protocol state of the target server by taking snapshots of long-lived memory areas, and by applying a fuzzy hashing algorithm (Locality-Sensitive Hashing) to map memory contents to a unique state identifier. The fuzzer incrementally builds a protocol state machine for guiding fuzzing. We implemented and released StateAFL as open-source software. As a basis for reproducible experimentation, we integrated StateAFL with a large set of network servers for popular protocols, with no manual customization to accomodate for the protocol. The experimental results show that the fuzzer can be applied with no manual customization on a large set of network servers for popular protocols, and that it can achieve comparable, or even better code coverage and bug detection than customized fuzzing. Moreover, our qualitative analysis shows that states inferred from memory better reflect the server behavior than only using response codes from messages.},
  issn     = {1573-7616},
  doi      = {10.1007/s10664-022-10233-3},
  url      = {https://doi.org/10.1007/s10664-022-10233-3}
}


@inproceedings{SandPuppy,
  author    = {Paliath, Vivin
               and Trickel, Erik
               and Bao, Tiffany
               and Wang, Ruoyu
               and Doup{\'e}, Adam
               and Shoshitaishvili, Yan},
  editor    = {Maggi, Federico
               and Egele, Manuel
               and Payer, Mathias
               and Carminati, Michele},
  title     = {SandPuppy: Deep-State Fuzzing Guided by Automatic Detection of State-Representative Variables},
  booktitle = {Detection of Intrusions and Malware, and Vulnerability Assessment},
  year      = {2024},
  publisher = {Springer Nature Switzerland},
  address   = {Cham},
  pages     = {227--250},
  abstract  = {Current state-of-the-art automated fuzzing approaches cannot explore deep program-states without human assistance. Recently, Ijon allowed humans to provide code-annotations on the target to expose program state to the fuzzer. However, this requires a human to read, understand, and annotate the program source, which limits scalability and applicability.},
  isbn      = {978-3-031-64171-8}
}


@inproceedings{Ijon,
  author    = {Aschermann, Cornelius and Schumilo, Sergej and Abbasi, Ali and Holz, Thorsten},
  booktitle = {2020 IEEE Symposium on Security and Privacy (SP)},
  title     = {Ijon: Exploring Deep State Spaces via Fuzzing},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {1597-1612},
  keywords  = {Fuzzing;Computer bugs;Space exploration;Software;Tools;Games;Instruments},
  doi       = {10.1109/SP40000.2020.00117}
}

@inproceedings{INVSCOV,
  author    = {Andrea Fioraldi and Daniele Cono D{\textquoteright}Elia and Davide Balzarotti},
  title     = {The Use of Likely Invariants as Feedback for Fuzzers},
  booktitle = {30th USENIX Security Symposium (USENIX Security 21)},
  year      = {2021},
  isbn      = {978-1-939133-24-3},
  pages     = {2829--2846},
  url       = {https://www.usenix.org/conference/usenixsecurity21/presentation/fioraldi},
  publisher = {USENIX Association},
  month     = aug
}

@inproceedings{Ankou,
  author    = {Man\`{e}s, Valentin J. M. and Kim, Soomin and Cha, Sang Kil},
  title     = {Ankou: guiding grey-box fuzzing towards combinatorial difference},
  year      = {2020},
  isbn      = {9781450371216},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3377811.3380421},
  doi       = {10.1145/3377811.3380421},
  abstract  = {Grey-box fuzzing is an evolutionary process, which maintains and evolves a population of test cases with the help of a fitness function. Fitness functions used by current grey-box fuzzers are not informative in that they cannot distinguish different program executions as long as those executions achieve the same coverage. The problem is that current fitness functions only consider a union of data, but not their combination. As such, fuzzers often get stuck in a local optimum during their search. In this paper, we introduce Ankou, the first grey-box fuzzer that recognizes different combinations of execution information, and present several scalability challenges encountered while designing and implementing Ankou. Our experimental results show that Ankou is 1.94\texttimes{} and 8.0\texttimes{} more effective in finding bugs than AFL and Angora, respectively.},
  booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
  pages     = {1024–1036},
  numpages  = {13},
  keywords  = {fuzz testing, grey-box fuzzing, guided fuzzing, principal component analysis, software testing},
  location  = {Seoul, South Korea},
  series    = {ICSE '20}
}
@article{FuzzFactory,
  author     = {Padhye, Rohan and Lemieux, Caroline and Sen, Koushik and Simon, Laurent and Vijayakumar, Hayawardh},
  title      = {FuzzFactory: domain-specific fuzzing with waypoints},
  year       = {2019},
  issue_date = {October 2019},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {3},
  number     = {OOPSLA},
  url        = {https://doi.org/10.1145/3360600},
  doi        = {10.1145/3360600},
  abstract   = {Coverage-guided fuzz testing has gained prominence as a highly effective method of finding security vulnerabilities such as buffer overflows in programs that parse binary data. Recently, researchers have introduced various specializations to the coverage-guided fuzzing algorithm for different domain-specific testing goals, such as finding performance bottlenecks, generating valid inputs, handling magic-byte comparisons, etc. Each such solution can require non-trivial implementation effort and produces a distinct variant of a fuzzing tool. We observe that many of these domain-specific solutions follow a common solution pattern.  In this paper, we present FuzzFactory, a framework for developing domain-specific fuzzing applications without requiring changes to mutation and search heuristics. FuzzFactory allows users to specify the collection of dynamic domain-specific feedback during test execution, as well as how such feedback should be aggregated. FuzzFactory uses this information to selectively save intermediate inputs, called waypoints, to augment coverage-guided fuzzing. Such waypoints always make progress towards domain-specific multi-dimensional objectives. We instantiate six domain-specific fuzzing applications using FuzzFactory: three re-implementations of prior work and three novel solutions, and evaluate their effectiveness on benchmarks from Google's fuzzer test suite. We also show how multiple domains can be composed to perform better than the sum of their parts. For example, we combine domain-specific feedback about strict equality comparisons and dynamic memory allocations, to enable the automatic generation of LZ4 bombs and PNG bombs.},
  journal    = {Proc. ACM Program. Lang.},
  month      = oct,
  articleno  = {174},
  numpages   = {29},
  keywords   = {waypoints, fuzz testing, frameworks, domain-specific fuzzing}
}

@inproceedings{ParmeSan,
  author    = {Sebastian {\"O}sterlund and Kaveh Razavi and Herbert Bos and Cristiano Giuffrida},
  title     = {{ParmeSan}: Sanitizer-guided Greybox Fuzzing},
  booktitle = {29th USENIX Security Symposium (USENIX Security 20)},
  year      = {2020},
  isbn      = {978-1-939133-17-5},
  pages     = {2289--2306},
  url       = {https://www.usenix.org/conference/usenixsecurity20/presentation/osterlund},
  publisher = {USENIX Association},
  month     = aug
}

@inproceedings{DDFuzz,
  author    = {Mantovani, Alessandro and Fioraldi, Andrea and Balzarotti, Davide},
  booktitle = {2022 IEEE 7th European Symposium on Security and Privacy (EuroS\&P)},
  title     = {Fuzzing with Data Dependency Information},
  year      = {2022},
  volume    = {},
  number    = {},
  pages     = {286-302},
  keywords  = {Codes;Instruments;Computer bugs;Fuzzing;Data structures;Libraries;Task analysis;fuzzing;data dependency;vulnerability;LLVM;instrumentation},
  doi       = {10.1109/EuroSP53844.2022.00026}
}

@inproceedings{StateFuzz,
  author    = {Bodong Zhao and Zheming Li and Shisong Qin and Zheyu Ma and Ming Yuan and Wenyu Zhu and Zhihong Tian and Chao Zhang},
  title     = {{StateFuzz}: System {Call-Based} {State-Aware} Linux Driver Fuzzing},
  booktitle = {31st USENIX Security Symposium (USENIX Security 22)},
  year      = {2022},
  isbn      = {978-1-939133-31-1},
  address   = {Boston, MA},
  pages     = {3273--3289},
  url       = {https://www.usenix.org/conference/usenixsecurity22/presentation/zhao-bodong},
  publisher = {USENIX Association},
  month     = aug
}

@article{StatefulReview,
  author     = {Daniele, Cristian and Andarzian, Seyed Behnam and Poll, Erik},
  title      = {Fuzzers for Stateful Systems: Survey and Research Directions},
  year       = {2024},
  issue_date = {September 2024},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {56},
  number     = {9},
  issn       = {0360-0300},
  url        = {https://doi.org/10.1145/3648468},
  doi        = {10.1145/3648468},
  abstract   = {Fuzzing is a very effective testing methodology to find bugs. In a nutshell, a fuzzer sends many slightly malformed messages to the software under test, hoping for crashes or incorrect system behaviour. The methodology is relatively simple, although applications that keep internal states are challenging to fuzz. The research community has responded to this challenge by developing fuzzers tailored to stateful systems, but a clear understanding of the variety of strategies is still missing. In this paper, we present the first taxonomy of fuzzers for stateful systems and provide a systematic comparison and classification of these fuzzers.},
  journal    = {ACM Comput. Surv.},
  month      = apr,
  articleno  = {222},
  numpages   = {23},
  keywords   = {Stateful fuzzing, state model, active learning}
}

@inproceedings{ProFuzzBench,
  author    = {Natella, Roberto and Pham, Van-Thuan},
  title     = {ProFuzzBench: a benchmark for stateful protocol fuzzing},
  year      = {2021},
  isbn      = {9781450384599},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3460319.3469077},
  doi       = {10.1145/3460319.3469077},
  abstract  = {We present a new benchmark (ProFuzzBench) for stateful fuzzing of network protocols. The benchmark includes a suite of representative open-source network servers for popular protocols, and tools to automate experimentation. We discuss challenges and potential directions for future research based on this benchmark.},
  booktitle = {Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages     = {662–665},
  numpages  = {4},
  keywords  = {Network Protocols, Fuzzing, Benchmarking},
  location  = {Virtual, Denmark},
  series    = {ISSTA 2021}
}

@inproceedings{AFLNET,
  author    = {Pham, Van-Thuan and Böhme, Marcel and Roychoudhury, Abhik},
  booktitle = {2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)},
  title     = {AFLNET: A Greybox Fuzzer for Network Protocols},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {460-465},
  keywords  = {Servers;Protocols;Fuzzing;Tools;Data models;Security;Computer bugs},
  doi       = {10.1109/ICST46399.2020.00062}
}

@article{Autofuzz,
  title     = {{Autofuzz}: Automated network protocol fuzzing framework},
  author    = {Gorbunov, Serge and Rosenbloom, Arnold},
  journal   = {Ijcsns},
  volume    = {10},
  number    = {8},
  pages     = {239},
  year      = {2010},
  publisher = {Citeseer}
}

@inproceedings{EPF,
  author    = {Helmke, René and Winter, Eugen and Rademacher, Michael},
  booktitle = {2021 18th International Conference on Privacy, Security and Trust (PST)},
  title     = {EPF: An Evolutionary, Protocol-Aware, and Coverage-Guided Network Fuzzing Framework},
  year      = {2021},
  volume    = {},
  number    = {},
  pages     = {1-7},
  keywords  = {Measurement;Schedules;Privacy;Protocols;Semantics;Simulated annealing;Fuzzing;security;fuzzing;network;protocol;coverage-guided;genetic;greybox;framework;evolutionary;annealing},
  doi       = {10.1109/PST52912.2021.9647801}
}

@inproceedings{ModelBased,
  author    = {Hsu, Yating and Shu, Guoqiang and Lee, David},
  booktitle = {2008 IEEE International Conference on Network Protocols},
  title     = {A model-based approach to security flaw detection of network protocol implementations},
  year      = {2008},
  volume    = {},
  number    = {},
  pages     = {114-123},
  keywords  = {Protocols;Fault detection;Network synthesis;System testing;Security;Automation;Minimization methods;Automata;State-space methods;Vehicle crash testing;formal model;fuzz testing;protocol implementation;security flaw},
  doi       = {10.1109/ICNP.2008.4697030}
}

@inproceedings{GANFuzz,
  author    = {Hu, Zhicheng and Shi, Jianqi and Huang, YanHong and Xiong, Jiawen and Bu, Xiangxing},
  title     = {GANFuzz: a GAN-based industrial network protocol fuzzing framework},
  year      = {2018},
  isbn      = {9781450357616},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3203217.3203241},
  doi       = {10.1145/3203217.3203241},
  abstract  = {In this paper, we attempt to improve industrial safety from the perspective of communication security. We leverage the protocol fuzzing technology to reveal errors and vulnerabilities inside implementations of industrial network protocols(INPs). Traditionally, to effectively conduct protocol fuzzing, the test data has to be generated under the guidance of protocol grammar, which is built either by interpreting the protocol specifications or reverse engineering from network traces. In this study, we propose an automated test case generation method, in which the protocol grammar is learned by deep learning. Generative adversarial network(GAN) is employed to train a generative model over real-world protocol messages to enable us to learn the protocol grammar. Then we can use the trained generative model to produce fake but plausible messages, which are promising test cases. Based on this approach, we present an automatical and intelligent fuzzing framework(GANFuzz) for testing implementations of INPs. Compared to prior work, GANFuzz offers a new way for this problem. Moreover, GANFuzz does not rely on protocol specification, so that it can be applied to both public and proprietary protocols, which outperforms many previous frameworks. We use GANFuzz to test several simulators of the Modbus-TCP protocol and find some errors and vulnerabilities.},
  booktitle = {Proceedings of the 15th ACM International Conference on Computing Frontiers},
  pages     = {138–145},
  numpages  = {8},
  keywords  = {fuzzing, generative adversarial network, generative model, implementations, industrial network protocols, industrial safety, protocol grammar},
  location  = {Ischia, Italy},
  series    = {CF '18}
}

@article{ChallengesAndReflections,
  author   = {Boehme, Marcel and Cadar, Cristian and ROYCHOUDHURY, Abhik},
  journal  = {IEEE Software},
  title    = {Fuzzing: Challenges and Reflections},
  year     = {2021},
  volume   = {38},
  number   = {3},
  pages    = {79-86},
  keywords = {Fuzzing;Computer bugs;Software engineering;Security;Industries},
  doi      = {10.1109/MS.2020.3016773}
}


@inproceedings{TCPFuzz,
  author    = {Yong-Hao Zou and Jia-Ju Bai and Jielong Zhou and Jianfeng Tan and Chenggang Qin and Shi-Min Hu},
  title     = {{TCP-Fuzz}: Detecting Memory and Semantic Bugs in {TCP} Stacks with Fuzzing},
  booktitle = {2021 USENIX Annual Technical Conference (USENIX ATC 21)},
  year      = {2021},
  isbn      = {978-1-939133-23-6},
  pages     = {489--502},
  url       = {https://www.usenix.org/conference/atc21/presentation/zou},
  publisher = {USENIX Association},
  month     = jul
}


@inproceedings{FitM,
  journal      = {Proceedings 2022 Workshop on Binary Analysis Research},
  organization = {Workshop on Binary Analysis Research},
  doi          = {10.14722/bar.2022.23008},
  publisher    = {Internet Society},
  title        = {FitM: Binary-Only Coverage-Guided Fuzzing for Stateful Network Protocols},
  url          = {http://dx.doi.org/10.14722/bar.2022.23008},
  author       = {Maier, Dominik and Bittner, Otto and Beier, Julian and Munier, Marc},
  date         = {2022},
  year         = {2022}
}


@inproceedings{ModbusTCP,
  author    = {Voyiatzis, Artemios G. and Katsigiannis, Konstantinos and Koubias, Stavros},
  booktitle = {2015 IEEE 20th Conference on Emerging Technologies \& Factory Automation (ETFA)},
  title     = {A Modbus/TCP Fuzzer for testing internetworked industrial systems},
  year      = {2015},
  volume    = {},
  number    = {},
  pages     = {1-6},
  keywords  = {Protocols;Testing;Software;Reconnaissance;Sockets;Computer crime;Computer crashes},
  doi       = {10.1109/ETFA.2015.7301400}
}

@inproceedings{MTFStorm,
  author    = {Katsigiannis, K. and Serpanos, D.},
  booktitle = {2018 IEEE 23rd International Conference on Emerging Technologies and Factory Automation (ETFA)},
  title     = {MTF-Storm: a High Performance Fuzzer for Modbus/TCP},
  year      = {2018},
  volume    = {1},
  number    = {},
  pages     = {926-931},
  keywords  = {Protocols;Fuzzing;Integrated circuits;Reconnaissance;Tools;Modbus;fuzzing;protocol testing},
  doi       = {10.1109/ETFA.2018.8502600}
}

@article{IndustrialReview,
  title    = {A survey on fuzz testing technologies for industrial control protocols},
  journal  = {Journal of Network and Computer Applications},
  volume   = {232},
  pages    = {104020},
  year     = {2024},
  issn     = {1084-8045},
  doi      = {https://doi.org/10.1016/j.jnca.2024.104020},
  url      = {https://www.sciencedirect.com/science/article/pii/S1084804524001978},
  author   = {Xiaoyan Wei and Zheng Yan and Xueqin Liang},
  keywords = {Industrial security, Fuzzing, Industrial control protocols, Vulnerability detection},
  abstract = {The development of the industrial Internet of Things enables industrial control systems to become inter-networked and inter-connected, making them intelligent with high productivity. However, these systems are exposed to external environments and vulnerable to network attacks, which also suffer from internal vulnerabilities. Fuzz testing, in short fuzzing, is a technique to enhance the security of industrial control systems by finding errors when repeatedly executing software that injects illegal, malformed, or unexpected inputs into the systems. Unfortunately, traditional fuzzing of communication protocols faces low coverage and efficiency problems when being applied to industrial protocols, considering the characteristics of industrial protocols such as real-time and multi-interaction. Moreover, fuzzing is difficult to perform because many structures of industrial control protocols are not publicly available. Although researchers have started to focus on the fuzzing of industrial control protocols, existing literature still lacks a thorough survey of its recent advances. To fill this gap, we conduct a comprehensive survey on existing fuzzing methods for industrial control protocols. After a brief introduction to industrial control protocols and fuzzing, we propose a set of metrics for judging the pros and cons of existing fuzzing methods. Based on these metrics, we evaluate and compare the performance of fuzzing methods of industrial control protocols in the past eight years. Based on our review and analysis, we further summarize the open problems of these methods for achieving the proposed metrics and elaborate on future research directions toward secure industrial control systems.}
}

@article{MTA,
  title    = {MTA Fuzzer: A low-repetition rate Modbus TCP fuzzing method based on Transformer and Mutation Target Adaptation},
  journal  = {Computers \& Security},
  volume   = {144},
  pages    = {103973},
  year     = {2024},
  issn     = {0167-4048},
  doi      = {https://doi.org/10.1016/j.cose.2024.103973},
  url      = {https://www.sciencedirect.com/science/article/pii/S0167404824002785},
  author   = {Wenpeng Wang and Zhixiang Chen and Ziyang Zheng and Hui Wang and Junxing Luo},
  keywords = {Modbus TCP, Vulnerability mining, Fuzzing, Transformer, Low-repetition rate, Adaptive},
  abstract = {The widespread application of industrial control systems has driven the development of industrial control protocols. However, traditional industrial control protocols suffer from issues such as a lack of security mechanisms, resulting in the existence of many dangerous vulnerabilities in industrial control systems. Fuzzing, as a commonly used technique for vulnerability discovery, has its own set of issues, including low testing efficiency, lack of adaptive capability, and high repetition rate of generated test cases. To solve the existing problems, we propose a low-repetition rate Modbus TCP fuzzing method based on Transformer and Mutation Target Adaptation. Firstly, the syntactic features of the industrial control protocol Modbus TCP are learned by using a simplified Transformer model. The model effectively reduces the training and generation time without decreasing the acceptance rate of test cases; Secondly, in the test case generation phase, in order to improve the mutation efficiency of test cases, the byte mutation probability adaptive strategy is introduced to replace the greedy strategy of Transformer. This strategy can dynamically adjust the mutation probability of each byte in the newly generated test cases, so as to improve the abnormal rate and reduce the repetition rate of test cases; Finally, the mutation results are selected by the mutation byte adaptive selection strategy, which not only improves the mutation adaptivity, but also maintains the diversity of mutations. The experimental results indicate that, compared to traditional methods, our approach has improved acceptance rates and abnormal rates by at least 10\%. In comparison to AI-based fuzzing methods, our approach maintains a similar acceptance rate while increasing the abnormal rate by 3\% to 25\%.}
}

@inproceedings{StateMachine,
  author    = {Zhao, Pengyu and Jiang, Sikang and Liu, Shengli and Liu, Long},
  booktitle = {2024 4th International Conference on Electronic Information Engineering and Computer Science (EIECS)},
  title     = {Fuzz Testing of Protocols Based on Protocol Process State Machines},
  year      = {2024},
  volume    = {},
  number    = {},
  pages     = {844-850},
  keywords  = {Protocols;Codes;Source coding;Static analysis;Fuzzing;Computer crashes;Software;Security;Optimization;Testing;protocol fuzz testing;vulnerability mining;state variables;state selection},
  doi       = {10.1109/EIECS63941.2024.10800590}
}

@inproceedings{AnotherModbusTCP,
  author    = {Xiong, Qi and Liu, Hui and Xu, Yuan and Rao, Huayi and Yi, Shengwei and Zhang, Baofeng and Jia, Wei and Deng, Hui},
  booktitle = {2015 IEEE International Conference on Electro/Information Technology (EIT)},
  title     = {A vulnerability detecting method for Modbus-TCP based on smart fuzzing mechanism},
  year      = {2015},
  volume    = {},
  number    = {},
  pages     = {404-409},
  keywords  = {Protocols;Testing;Security;Information technology;Monitoring;Servers;Industrial control;Modbus-TCP Protocol;Fuzzing Test;Vulnerability Detecting;Industrial Control System},
  doi       = {10.1109/EIT.2015.7293376}
}

@article{Survey,
  author     = {Zhang, Xiaohan and Zhang, Cen and Li, Xinghua and Du, Zhengjie and Mao, Bing and Li, Yuekang and Zheng, Yaowen and Li, Yeting and Pan, Li and Liu, Yang and Deng, Robert},
  title      = {A Survey of Protocol Fuzzing},
  year       = {2024},
  issue_date = {February 2025},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {57},
  number     = {2},
  issn       = {0360-0300},
  url        = {https://doi.org/10.1145/3696788},
  doi        = {10.1145/3696788},
  abstract   = {Communication protocols form the bedrock of our interconnected world, yet vulnerabilities within their implementations pose significant security threats. Recent developments have seen a surge in fuzzing-based research dedicated to uncovering these vulnerabilities within protocol implementations. However, there still lacks a systematic overview of protocol fuzzing for answering the essential questions such as what the unique challenges are, how existing works solve them, and so on. To bridge this gap, we conducted a comprehensive investigation of related works from both academia and industry. Our study includes a detailed summary of the specific challenges in protocol fuzzing and provides a systematic categorization and overview of existing research efforts. Furthermore, we explore and discuss potential future research directions in protocol fuzzing.},
  journal    = {ACM Comput. Surv.},
  month      = oct,
  articleno  = {35},
  numpages   = {36},
  keywords   = {Protocol, fuzz testing, security}
}

@article{StateOfTheArt,
  author   = {Liang, Hongliang and Pei, Xiaoxiao and Jia, Xiaodong and Shen, Wuwei and Zhang, Jian},
  journal  = {IEEE Transactions on Reliability},
  title    = {Fuzzing: State of the Art},
  year     = {2018},
  volume   = {67},
  number   = {3},
  pages    = {1199-1218},
  keywords = {Fuzzing;Computer bugs;Software testing;Security;Fuzzing;reliability;security;software testing;survey},
  doi      = {10.1109/TR.2018.2834476}
}


@article{ModbusTCP2,
  author         = {Lai, Yingxu and Gao, Huijuan and Liu, Jing},
  title          = {Vulnerability Mining Method for the Modbus TCP Using an Anti-Sample Fuzzer},
  journal        = {Sensors},
  volume         = {20},
  year           = {2020},
  number         = {7},
  article-number = {2040},
  url            = {https://www.mdpi.com/1424-8220/20/7/2040},
  pubmedid       = {32260503},
  issn           = {1424-8220},
  abstract       = {Vulnerability mining technology is used for protecting the security of industrial control systems and their network protocols. Traditionally, vulnerability mining methods have the shortcomings of poor vulnerability mining ability and low reception rate. In this study, a test case generation model for vulnerability mining of the Modbus TCP based on an anti-sample algorithm is proposed. Firstly, a recurrent neural network is trained to learn the semantics of the protocol data unit. The softmax function is used to express the probability distribution of data values. Next, the random variable threshold and the maximum probability are compared in the algorithm to determine whether to replace the current data value with the minimum probability data value. Finally, the Modbus application protocol (MBAP) header is completed according to the protocol specification. Experiments using the anti-sample fuzzer show that it not only improves the reception rate of test cases and the ability to exploit vulnerabilities, but also detects vulnerabilities of industrial control protocols more quickly.},
  doi            = {10.3390/s20072040}
}



@inproceedings{TFuzz,
  author    = {Peng, Hui and Shoshitaishvili, Yan and Payer, Mathias},
  booktitle = {2018 IEEE Symposium on Security and Privacy (SP)},
  title     = {T-Fuzz: Fuzzing by Program Transformation},
  year      = {2018},
  volume    = {},
  number    = {},
  pages     = {697-710},
  keywords  = {Computer bugs;Fuzzing;Software;Security;Libraries;Tools;Fuzz;Bug finding;Program Analysis},
  doi       = {10.1109/SP.2018.00056}
}

@phdthesis{ENIP,
  author  = {Tacliad, Francisco},
  title   = {{ENIP Fuzz}: a Scapy-based EtherNet/IP fuzzer for security testing},
  school  = {Monterey, California: Naval Postgraduate School},
  year    = {2016},
  address = {https://hdl.handle.net/10945/56714},
  month   = {09}
}

@inproceedings{Congestion,
  author    = {Jero, Samuel and Hoque, Endadul and Choffnes, David and Mislove, Alan and Nita-Rotaru, Cristina},
  title     = {Automated Attack Discovery in TCP Congestion Control Using a Model-guided Approach},
  year      = {2018},
  isbn      = {9781450355858},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3232755.3232769},
  doi       = {10.1145/3232755.3232769},
  abstract  = {In this work, we propose an automated method to find attacks against TCP congestion control implementations that combines the generality of implementation-agnostic fuzzing with the precision of runtime analysis. It uses a model-guided approach to generate abstract attack strategies by leveraging a state machine model of congestion control to find vulnerable state machine paths that an attacker could exploit to increase or decrease the throughput of a connection. These abstract strategies are then mapped to concrete attack strategies, which consist of sequences of actions such as injection or modification of acknowledgements. We design and implement a virtualized platform, TCPwn, that consists of a proxy-based attack injector to inject these concrete attack strategies. We evaluated 5 TCP implementations from 4 Linux distributions and Windows 8.1. Overall, we found 11 classes of attacks, of which 8 are new.},
  booktitle = {Proceedings of the 2018 Applied Networking Research Workshop},
  pages     = {95},
  numpages  = {1},
  location  = {Montreal, QC, Canada},
  series    = {ANRW '18}
}

@article{Demystifying,
  author     = {Mallissery, Sanoop and Wu, Yu-Sung},
  title      = {Demystify the Fuzzing Methods: A Comprehensive Survey},
  year       = {2023},
  issue_date = {March 2024},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {56},
  number     = {3},
  issn       = {0360-0300},
  url        = {https://doi.org/10.1145/3623375},
  doi        = {10.1145/3623375},
  abstract   = {Massive software applications possess complex data structures or parse complex data structures; in such cases, vulnerabilities in the software become inevitable. The vulnerabilities are the source of cyber-security threats, and discovering this before the software deployment is challenging. Fuzzing is a vulnerability discovery solution that resonates with random-mutation, feedback-driven, coverage-guided, constraint-guided, seed-scheduling, and target-oriented strategies. Each technique is wrapped beneath the black-, white-, and grey-box fuzzers to uncover diverse vulnerabilities. It consists of methods such as identifying structural information about the test cases to detect security vulnerabilities, symbolic and concrete program states to explore the unexplored locations, and full semantics of code coverage to create new test cases. We methodically examine each kind of fuzzers and contemporary fuzzers with a profound observation that addresses various research questions and systematically reviews and analyze the gaps and their solutions. Our survey comprised the recent related works on fuzzing techniques to demystify the fuzzing methods concerning the application domains and the target that, in turn, achieves higher code coverage and sound vulnerability detection.},
  journal    = {ACM Comput. Surv.},
  month      = oct,
  articleno  = {71},
  numpages   = {38},
  keywords   = {vulnerability discovery, code inspection, fuzzing, Automated testing}
}

@article{UNIX,
  author     = {Miller, Barton P. and Fredriksen, Lars and So, Bryan},
  title      = {{An Empirical Study of the Reliability of UNIX Utilities}},
  year       = {1990},
  issue_date = {Dec. 1990},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {33},
  number     = {12},
  issn       = {0001-0782},
  url        = {https://doi.org/10.1145/96267.96279},
  doi        = {10.1145/96267.96279},
  abstract   = {The following section describes the tools we built to test the utilities. These tools include the fuzz (random character) generator, ptyjig (to test interactive utilities), and scripts to automate the testing process. Next, we will describe the tests we performed, giving the types of input we presented to the utilities. Results from the tests will follow along with an analysis of the results, including identification and classification of the program bugs that caused the crashes. The final section presents concluding remarks, including suggestions for avoiding the types of problems detected by our study and some commentary on the bugs we found. We include an Appendix with the user manual pages for fuzz and ptyjig.},
  journal    = {Commun. ACM},
  month      = {12},
  pages      = {32–44},
  numpages   = {13}
}


@online{SanitizerCoverage,
  title   = {{SanitizerCoverage}},
  year    = {n.d.},
  url     = {https://clang.llvm.org/docs/SanitizerCoverage.html},
  urldate = {2024-05-28}
}

@online{ZephyrAbout,
  title   = {About the Zephyr Project},
  year    = {n.d.},
  url     = {https://www.zephyrproject.org/learn-about/},
  urldate = {2025-01-30}
}

@online{ZephyrUsedIn,
  title   = {Products Running Zephyr},
  year    = {n.d.},
  url     = {https://www.zephyrproject.org/products-running-zephyr/},
  urldate = {2025-01-30}
}

@online{ZephyrNativeSim,
  title   = {Native simulator - native\_sim},
  year    = {n.d.},
  url     = {https://docs.zephyrproject.org/latest/boards/native/native_sim/doc/index.html},
  urldate = {2025-01-31}
}

@online{NativeSimulator,
  title   = {Native Simulator — Repository},
  year    = {n.d.},
  url     = {https://github.com/BabbleSim/native_simulator/},
  urldate = {2025-01-31}
}

@online{ZephyrASANIssue,
  title   = {Zephyr — Repository — Issue: Runtime failure on samples/net/sockets/echo with LLVM 16 and ASAN for native\_sim},
  year    = {n.d.},
  url     = {https://github.com/zephyrproject-rtos/zephyr/issues/83863},
  urldate = {2025-01-31}
}

@online{ASAN,
  title   = {Clang documentation — AddressSanitizer},
  year    = {n.d.},
  url     = {https://clang.llvm.org/docs/AddressSanitizer.html},
  urldate = {2025-01-31}
}

@online{SanCov,
  title   = {Clang documentation — SanitizerCoverage},
  year    = {n.d.},
  url     = {https://clang.llvm.org/docs/SanitizerCoverage.html},
  urldate = {2025-01-31}
}

@online{RTOSWiki,
  title   = {Real-time operating system},
  year    = {n.d.},
  url     = {https://en.wikipedia.org/wiki/Real-time_operating_system},
  urldate = {2025-01-30}
}

@online{GoogleScholarFuzzing,
  title   = {Google Scholar — Fuzz Testing},
  year    = {2025},
  url     = {https://scholar.google.com/scholar?q=fuzz+testing},
  urldate = {2025-01-30}
}

@online{libFuzzer,
  title   = {libFuzzer — a library for coverage-guided fuzz testing},
  year    = {n.d.},
  url     = {https://llvm.org/docs/LibFuzzer.html},
  urldate = {2025-02-05}
}

@online{syskaller,
  title   = {syzkaller - kernel fuzzer},
  year    = {n.d.},
  url     = {https://github.com/google/syzkaller},
  urldate = {2025-02-05}
}

@online{hongfuzz,
  title   = {Honggfuzz},
  year    = {n.d.},
  url     = {https://honggfuzz.dev},
  urldate = {2025-02-05}
}
@online{OSSFuzz,
  title   = {OSS-Fuzz},
  year    = {n.d.},
  url     = {https://google.github.io/oss-fuzz/},
  urldate = {2025-02-05}
}

@online{AFL,
  title   = {American Fuzzy Lop — Whitepaper},
  year    = {n.d.},
  url     = {https://lcamtuf.coredump.cx/afl/technical_details.txt},
  urldate = {2025-02-05}
}

@inproceedings{AFLPlusPlus,
  author    = {Andrea Fioraldi and Dominik Maier and Heiko Ei{\ss}feldt and Marc Heuse},
  title     = {{AFL++} : Combining Incremental Steps of Fuzzing Research},
  booktitle = {14th USENIX Workshop on Offensive Technologies (WOOT 20)},
  year      = {2020},
  url       = {https://www.usenix.org/conference/woot20/presentation/fioraldi},
  publisher = {USENIX Association},
  month     = {08}
}

@inproceedings{MOpt,
  author    = {Chenyang Lyu and Shouling Ji and Chao Zhang and Yuwei Li and Wei-Han Lee and Yu Song and Raheem Beyah},
  title     = {{MOPT}: Optimized Mutation Scheduling for Fuzzers},
  booktitle = {28th {USENIX} Security Symposium ({USENIX} Security 19)},
  year      = {2019},
  isbn      = {978-1-939133-06-9},
  address   = {Santa Clara, CA},
  pages     = {1949--1966},
  url       = {https://www.usenix.org/conference/usenixsecurity19/presentation/lyu},
  publisher = {{USENIX} Association},
  month     = aug
}

@inproceedings{LibAFL,
  author    = {Andrea Fioraldi and Dominik Maier and Dongjia Zhang and Davide Balzarotti},
  title     = {{LibAFL: A Framework to Build Modular and Reusable Fuzzers}},
  booktitle = {Proceedings of the 29th ACM conference on Computer and communications security (CCS)},
  series    = {CCS '22},
  year      = {2022},
  month     = {11},
  location  = {Los Angeles, U.S.A.},
  publisher = {ACM}
}

@unpublished{EVA,
  author = {Valentin Huber},
  title  = {{Challenges and Mitigation Strategies in Symbolic Execution Based Fuzzing Through the Lens of Survey Papers}},
  year   = {2023},
  month  = {12},
  day    = {15},
  url    = {https://github.com/riesentoaster/review-symbolic-execution-in-fuzzing/releases/download/v1.0/Huber-Valentin-Challenges-and-Mitigation-Strategies-in-Symbolic-Execution-Based-Fuzzing-Through-the-Lens-of-Survey-Papers.pdf}
}

@unpublished{VT1,
  author = {Valentin Huber},
  title  = {{Running KLEE on GNU coreutils}},
  year   = {2024},
  month  = {02},
  day    = {13},
  url    = {https://github.com/riesentoaster/klee-coreutils-experiments/releases/download/v1.0/Huber-Valentin-running-KLEE-on-coreutils-report.pdf}
}

@unpublished{VT2,
  author = {Valentin Huber},
  title  = {{Differential Fuzzing on coreutils Using LibAFL}},
  year   = {2024},
  month  = {06},
  day    = {25},
  url    = {https://github.com/riesentoaster/coreutils-differential-fuzzing/releases/download/project-submission/Huber-Valentin_Differential-Fuzzing-on-coreutils-Using-LibAFL.pdf}
}

@article{FuzzingTheStateOfTheArt,
  title   = {Fuzzing: The State of the Art},
  journal = {DSTO Defence Science and Technology Organisation},
  author  = {Richard McNally and Kenneth Kwok-Hei Yiu and Duncan A. Grove and Damien Gerhardy},
  year    = {2012},
  month   = {02}
}

@online{ClusterFuzzLite,
  title   = {ClusterFuzzLite: Continuous fuzzing for all},
  year    = {2021},
  month   = {11},
  day     = {11},
  url     = {https://security.googleblog.com/2021/11/clusterfuzzlite-continuous-fuzzing-for.html},
  urldate = {2025-02-05},
  author  = {Methman, Jonathan}
}

@inproceedings{SAGE,
  author   = {Godefroid, Patrice and Levin, Michael Y. and Molnar, David},
  title    = {Automated Whitebox Fuzz Testing},
  year     = {2008},
  month    = {11},
  abstract = {Fuzz testing is an effective technique for finding security vulnerabilities in software. Traditionally, fuzz testing tools apply random mutations to well-formed inputs of a program and test the resulting values. We present an alternative whitebox fuzz testing approach inspired by recent advances in symbolic execution and dynamic test generation. Our approach records an actual run of the program under test on a well-formed input, symbolically evaluates the recorded trace, and gathers constraints on inputs capturing how the program uses these. The collected constraints are then negated one by one and solved with a constraint solver, producing new inputs that exercise different control paths in the program. This process is repeated with the help of a code-coverage maximizing heuristic designed to find defects as fast as possible. We have implemented this algorithm in SAGE (Scalable, Automated, Guided Execution), a new tool employing x86 instruction-level tracing and emulation for whitebox fuzzing of arbitrary file-reading Windows applications. We describe key optimizations needed to make dynamic test generation scale to large input files and long execution traces with hundreds of millions of instructions. We then present detailed experiments with several Windows applications. Notably, without any format-specific knowledge, SAGE detects the MS07-017 ANI vulnerability, which was missed by extensive blackbox fuzzing and static analysis tools. Furthermore, while still in an early stage of development, SAGE has already discovered 30+ new bugs in large shipped Windows applications including image processors, media players, and file decoders. Several of these bugs are potentially exploitable memory access violations.},
  url      = {https://www.microsoft.com/en-us/research/publication/automated-whitebox-fuzz-testing/}
}

@mastersthesis{KernelVsUserNetworking,
  author = {Cai, Peter},
  title  = {Kernel- vs. User-Level Networking: A Ballad of Interrupts and How to Mitigate Them},
  school = {University of Waterloo},
  year   = {2023}
}

@inproceedings{REDQUEEN,
  title     = {REDQUEEN: Fuzzing with Input-to-State Correspondence.},
  author    = {Aschermann, Cornelius and Schumilo, Sergej and Blazytko, Tim and Gawlik, Robert and Holz, Thorsten},
  booktitle = {Proceedings of the 2016 Network and Distributed System Security Symposium (NDSS)},
  volume    = {19},
  pages     = {1--15},
  year      = {2019}
}