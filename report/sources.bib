@unpublished{EVA,
  author = {Valentin Huber},
  title  = {{Challenges and Mitigation Strategies in Symbolic Execution Based Fuzzing Through the Lens of Survey Papers}},
  year   = {2023},
  month  = {12},
  day    = {15},
  url    = {https://github.com/riesentoaster/review-symbolic-execution-in-fuzzing/releases/download/v1.0/Huber-Valentin-Challenges-and-Mitigation-Strategies-in-Symbolic-Execution-Based-Fuzzing-Through-the-Lens-of-Survey-Papers.pdf}
}

@unpublished{VT1,
  author = {Valentin Huber},
  title  = {{Running KLEE on GNU coreutils}},
  year   = {2024},
  month  = {02},
  day    = {13},
  url    = {https://github.com/riesentoaster/klee-coreutils-experiments/releases/download/v1.0/Huber-Valentin-running-KLEE-on-coreutils-report.pdf}
}
@unpublished{VT2,
  author = {Valentin Huber},
  title  = {{Differential Fuzzing on coreutils Using LibAFL}},
  year   = {2024},
  month  = {06},
  day    = {25},
  url    = {https://github.com/riesentoaster/coreutils-differential-fuzzing/blob/main/report/out/index.pdf}
}

@inproceedings{StatefulGreybox,
  author    = {Jinsheng Ba and Marcel B{\"o}hme and Zahra Mirzamomen and Abhik Roychoudhury},
  title     = {Stateful Greybox Fuzzing},
  booktitle = {31st USENIX Security Symposium (USENIX Security 22)},
  year      = {2022},
  isbn      = {978-1-939133-31-1},
  address   = {Boston, MA},
  pages     = {3255--3272},
  url       = {https://www.usenix.org/conference/usenixsecurity22/presentation/ba},
  publisher = {USENIX Association},
  month     = aug
}


@article{StateAFL,
  author   = {Natella, Roberto},
  title    = {StateAFL: Greybox fuzzing for stateful network servers},
  journal  = {Empirical Software Engineering},
  year     = {2022},
  month    = {10},
  day      = {04},
  volume   = {27},
  number   = {7},
  pages    = {191},
  abstract = {Fuzzing network servers is a technical challenge, since the behavior of the target server depends on its state over a sequence of multiple messages. Existing solutions are costly and difficult to use, as they rely on manually-customized artifacts such as protocol models, protocol parsers, and learning frameworks. The aim of this work is to develop a greybox fuzzer (StateAFL) for network servers that only relies on lightweight analysis of the target program, with no manual customization, in a similar way to what the AFL fuzzer achieved for stateless programs. The proposed fuzzer instruments the target server at compile-time, to insert probes on memory allocations and network I/O operations. At run-time, it infers the current protocol state of the target server by taking snapshots of long-lived memory areas, and by applying a fuzzy hashing algorithm (Locality-Sensitive Hashing) to map memory contents to a unique state identifier. The fuzzer incrementally builds a protocol state machine for guiding fuzzing. We implemented and released StateAFL as open-source software. As a basis for reproducible experimentation, we integrated StateAFL with a large set of network servers for popular protocols, with no manual customization to accomodate for the protocol. The experimental results show that the fuzzer can be applied with no manual customization on a large set of network servers for popular protocols, and that it can achieve comparable, or even better code coverage and bug detection than customized fuzzing. Moreover, our qualitative analysis shows that states inferred from memory better reflect the server behavior than only using response codes from messages.},
  issn     = {1573-7616},
  doi      = {10.1007/s10664-022-10233-3},
  url      = {https://doi.org/10.1007/s10664-022-10233-3}
}


@inproceedings{SandPuppy,
  author    = {Paliath, Vivin
               and Trickel, Erik
               and Bao, Tiffany
               and Wang, Ruoyu
               and Doup{\'e}, Adam
               and Shoshitaishvili, Yan},
  editor    = {Maggi, Federico
               and Egele, Manuel
               and Payer, Mathias
               and Carminati, Michele},
  title     = {SandPuppy: Deep-State Fuzzing Guided by Automatic Detection of State-Representative Variables},
  booktitle = {Detection of Intrusions and Malware, and Vulnerability Assessment},
  year      = {2024},
  publisher = {Springer Nature Switzerland},
  address   = {Cham},
  pages     = {227--250},
  abstract  = {Current state-of-the-art automated fuzzing approaches cannot explore deep program-states without human assistance. Recently, Ijon allowed humans to provide code-annotations on the target to expose program state to the fuzzer. However, this requires a human to read, understand, and annotate the program source, which limits scalability and applicability.},
  isbn      = {978-3-031-64171-8}
}


@inproceedings{Ijon,
  author    = {Aschermann, Cornelius and Schumilo, Sergej and Abbasi, Ali and Holz, Thorsten},
  booktitle = {2020 IEEE Symposium on Security and Privacy (SP)},
  title     = {Ijon: Exploring Deep State Spaces via Fuzzing},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {1597-1612},
  keywords  = {Fuzzing;Computer bugs;Space exploration;Software;Tools;Games;Instruments},
  doi       = {10.1109/SP40000.2020.00117}
}

@inproceedings{INVSCOV,
  author    = {Andrea Fioraldi and Daniele Cono D{\textquoteright}Elia and Davide Balzarotti},
  title     = {The Use of Likely Invariants as Feedback for Fuzzers},
  booktitle = {30th USENIX Security Symposium (USENIX Security 21)},
  year      = {2021},
  isbn      = {978-1-939133-24-3},
  pages     = {2829--2846},
  url       = {https://www.usenix.org/conference/usenixsecurity21/presentation/fioraldi},
  publisher = {USENIX Association},
  month     = aug
}

@inproceedings{Ankou,
  author    = {Man\`{e}s, Valentin J. M. and Kim, Soomin and Cha, Sang Kil},
  title     = {Ankou: guiding grey-box fuzzing towards combinatorial difference},
  year      = {2020},
  isbn      = {9781450371216},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3377811.3380421},
  doi       = {10.1145/3377811.3380421},
  abstract  = {Grey-box fuzzing is an evolutionary process, which maintains and evolves a population of test cases with the help of a fitness function. Fitness functions used by current grey-box fuzzers are not informative in that they cannot distinguish different program executions as long as those executions achieve the same coverage. The problem is that current fitness functions only consider a union of data, but not their combination. As such, fuzzers often get stuck in a local optimum during their search. In this paper, we introduce Ankou, the first grey-box fuzzer that recognizes different combinations of execution information, and present several scalability challenges encountered while designing and implementing Ankou. Our experimental results show that Ankou is 1.94\texttimes{} and 8.0\texttimes{} more effective in finding bugs than AFL and Angora, respectively.},
  booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
  pages     = {1024–1036},
  numpages  = {13},
  keywords  = {fuzz testing, grey-box fuzzing, guided fuzzing, principal component analysis, software testing},
  location  = {Seoul, South Korea},
  series    = {ICSE '20}
}
@article{FuzzFactory,
  author     = {Padhye, Rohan and Lemieux, Caroline and Sen, Koushik and Simon, Laurent and Vijayakumar, Hayawardh},
  title      = {FuzzFactory: domain-specific fuzzing with waypoints},
  year       = {2019},
  issue_date = {October 2019},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {3},
  number     = {OOPSLA},
  url        = {https://doi.org/10.1145/3360600},
  doi        = {10.1145/3360600},
  abstract   = {Coverage-guided fuzz testing has gained prominence as a highly effective method of finding security vulnerabilities such as buffer overflows in programs that parse binary data. Recently, researchers have introduced various specializations to the coverage-guided fuzzing algorithm for different domain-specific testing goals, such as finding performance bottlenecks, generating valid inputs, handling magic-byte comparisons, etc. Each such solution can require non-trivial implementation effort and produces a distinct variant of a fuzzing tool. We observe that many of these domain-specific solutions follow a common solution pattern.  In this paper, we present FuzzFactory, a framework for developing domain-specific fuzzing applications without requiring changes to mutation and search heuristics. FuzzFactory allows users to specify the collection of dynamic domain-specific feedback during test execution, as well as how such feedback should be aggregated. FuzzFactory uses this information to selectively save intermediate inputs, called waypoints, to augment coverage-guided fuzzing. Such waypoints always make progress towards domain-specific multi-dimensional objectives. We instantiate six domain-specific fuzzing applications using FuzzFactory: three re-implementations of prior work and three novel solutions, and evaluate their effectiveness on benchmarks from Google's fuzzer test suite. We also show how multiple domains can be composed to perform better than the sum of their parts. For example, we combine domain-specific feedback about strict equality comparisons and dynamic memory allocations, to enable the automatic generation of LZ4 bombs and PNG bombs.},
  journal    = {Proc. ACM Program. Lang.},
  month      = oct,
  articleno  = {174},
  numpages   = {29},
  keywords   = {waypoints, fuzz testing, frameworks, domain-specific fuzzing}
}

@inproceedings{ParmeSan,
  author    = {Sebastian {\"O}sterlund and Kaveh Razavi and Herbert Bos and Cristiano Giuffrida},
  title     = {{ParmeSan}: Sanitizer-guided Greybox Fuzzing},
  booktitle = {29th USENIX Security Symposium (USENIX Security 20)},
  year      = {2020},
  isbn      = {978-1-939133-17-5},
  pages     = {2289--2306},
  url       = {https://www.usenix.org/conference/usenixsecurity20/presentation/osterlund},
  publisher = {USENIX Association},
  month     = aug
}

@inproceedings{DDFuzz,
  author    = {Mantovani, Alessandro and Fioraldi, Andrea and Balzarotti, Davide},
  booktitle = {2022 IEEE 7th European Symposium on Security and Privacy (EuroS\&P)},
  title     = {Fuzzing with Data Dependency Information},
  year      = {2022},
  volume    = {},
  number    = {},
  pages     = {286-302},
  keywords  = {Codes;Instruments;Computer bugs;Fuzzing;Data structures;Libraries;Task analysis;fuzzing;data dependency;vulnerability;LLVM;instrumentation},
  doi       = {10.1109/EuroSP53844.2022.00026}
}

@inproceedings{StateFuzz,
  author    = {Bodong Zhao and Zheming Li and Shisong Qin and Zheyu Ma and Ming Yuan and Wenyu Zhu and Zhihong Tian and Chao Zhang},
  title     = {{StateFuzz}: System {Call-Based} {State-Aware} Linux Driver Fuzzing},
  booktitle = {31st USENIX Security Symposium (USENIX Security 22)},
  year      = {2022},
  isbn      = {978-1-939133-31-1},
  address   = {Boston, MA},
  pages     = {3273--3289},
  url       = {https://www.usenix.org/conference/usenixsecurity22/presentation/zhao-bodong},
  publisher = {USENIX Association},
  month     = aug
}

@article{StatefulReview,
  author     = {Daniele, Cristian and Andarzian, Seyed Behnam and Poll, Erik},
  title      = {Fuzzers for Stateful Systems: Survey and Research Directions},
  year       = {2024},
  issue_date = {September 2024},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {56},
  number     = {9},
  issn       = {0360-0300},
  url        = {https://doi.org/10.1145/3648468},
  doi        = {10.1145/3648468},
  abstract   = {Fuzzing is a very effective testing methodology to find bugs. In a nutshell, a fuzzer sends many slightly malformed messages to the software under test, hoping for crashes or incorrect system behaviour. The methodology is relatively simple, although applications that keep internal states are challenging to fuzz. The research community has responded to this challenge by developing fuzzers tailored to stateful systems, but a clear understanding of the variety of strategies is still missing. In this paper, we present the first taxonomy of fuzzers for stateful systems and provide a systematic comparison and classification of these fuzzers.},
  journal    = {ACM Comput. Surv.},
  month      = apr,
  articleno  = {222},
  numpages   = {23},
  keywords   = {Stateful fuzzing, state model, active learning}
}

@inproceedings{ProFuzzBench,
  author    = {Natella, Roberto and Pham, Van-Thuan},
  title     = {ProFuzzBench: a benchmark for stateful protocol fuzzing},
  year      = {2021},
  isbn      = {9781450384599},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3460319.3469077},
  doi       = {10.1145/3460319.3469077},
  abstract  = {We present a new benchmark (ProFuzzBench) for stateful fuzzing of network protocols. The benchmark includes a suite of representative open-source network servers for popular protocols, and tools to automate experimentation. We discuss challenges and potential directions for future research based on this benchmark.},
  booktitle = {Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages     = {662–665},
  numpages  = {4},
  keywords  = {Network Protocols, Fuzzing, Benchmarking},
  location  = {Virtual, Denmark},
  series    = {ISSTA 2021}
}

@inproceedings{AFLNET,
  author    = {Pham, Van-Thuan and Böhme, Marcel and Roychoudhury, Abhik},
  booktitle = {2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)},
  title     = {AFLNET: A Greybox Fuzzer for Network Protocols},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {460-465},
  keywords  = {Servers;Protocols;Fuzzing;Tools;Data models;Security;Computer bugs},
  doi       = {10.1109/ICST46399.2020.00062}
}

@article{Autofuzz,
  title     = {{Autofuzz}: Automated network protocol fuzzing framework},
  author    = {Gorbunov, Serge and Rosenbloom, Arnold},
  journal   = {Ijcsns},
  volume    = {10},
  number    = {8},
  pages     = {239},
  year      = {2010},
  publisher = {Citeseer}
}

@inproceedings{EPF,
  author    = {Helmke, René and Winter, Eugen and Rademacher, Michael},
  booktitle = {2021 18th International Conference on Privacy, Security and Trust (PST)},
  title     = {EPF: An Evolutionary, Protocol-Aware, and Coverage-Guided Network Fuzzing Framework},
  year      = {2021},
  volume    = {},
  number    = {},
  pages     = {1-7},
  keywords  = {Measurement;Schedules;Privacy;Protocols;Semantics;Simulated annealing;Fuzzing;security;fuzzing;network;protocol;coverage-guided;genetic;greybox;framework;evolutionary;annealing},
  doi       = {10.1109/PST52912.2021.9647801}
}

@inproceedings{ModelBased,
  author    = {Hsu, Yating and Shu, Guoqiang and Lee, David},
  booktitle = {2008 IEEE International Conference on Network Protocols},
  title     = {A model-based approach to security flaw detection of network protocol implementations},
  year      = {2008},
  volume    = {},
  number    = {},
  pages     = {114-123},
  keywords  = {Protocols;Fault detection;Network synthesis;System testing;Security;Automation;Minimization methods;Automata;State-space methods;Vehicle crash testing;formal model;fuzz testing;protocol implementation;security flaw},
  doi       = {10.1109/ICNP.2008.4697030}
}

@inproceedings{GANFuzz,
  author    = {Hu, Zhicheng and Shi, Jianqi and Huang, YanHong and Xiong, Jiawen and Bu, Xiangxing},
  title     = {GANFuzz: a GAN-based industrial network protocol fuzzing framework},
  year      = {2018},
  isbn      = {9781450357616},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3203217.3203241},
  doi       = {10.1145/3203217.3203241},
  abstract  = {In this paper, we attempt to improve industrial safety from the perspective of communication security. We leverage the protocol fuzzing technology to reveal errors and vulnerabilities inside implementations of industrial network protocols(INPs). Traditionally, to effectively conduct protocol fuzzing, the test data has to be generated under the guidance of protocol grammar, which is built either by interpreting the protocol specifications or reverse engineering from network traces. In this study, we propose an automated test case generation method, in which the protocol grammar is learned by deep learning. Generative adversarial network(GAN) is employed to train a generative model over real-world protocol messages to enable us to learn the protocol grammar. Then we can use the trained generative model to produce fake but plausible messages, which are promising test cases. Based on this approach, we present an automatical and intelligent fuzzing framework(GANFuzz) for testing implementations of INPs. Compared to prior work, GANFuzz offers a new way for this problem. Moreover, GANFuzz does not rely on protocol specification, so that it can be applied to both public and proprietary protocols, which outperforms many previous frameworks. We use GANFuzz to test several simulators of the Modbus-TCP protocol and find some errors and vulnerabilities.},
  booktitle = {Proceedings of the 15th ACM International Conference on Computing Frontiers},
  pages     = {138–145},
  numpages  = {8},
  keywords  = {fuzzing, generative adversarial network, generative model, implementations, industrial network protocols, industrial safety, protocol grammar},
  location  = {Ischia, Italy},
  series    = {CF '18}
}

@article{ChallengesAndReflections,
  author   = {Boehme, Marcel and Cadar, Cristian and ROYCHOUDHURY, Abhik},
  journal  = {IEEE Software},
  title    = {Fuzzing: Challenges and Reflections},
  year     = {2021},
  volume   = {38},
  number   = {3},
  pages    = {79-86},
  keywords = {Fuzzing;Computer bugs;Software engineering;Security;Industries},
  doi      = {10.1109/MS.2020.3016773}
}


@inproceedings{TCPFuzz,
  author    = {Yong-Hao Zou and Jia-Ju Bai and Jielong Zhou and Jianfeng Tan and Chenggang Qin and Shi-Min Hu},
  title     = {{TCP-Fuzz}: Detecting Memory and Semantic Bugs in {TCP} Stacks with Fuzzing},
  booktitle = {2021 USENIX Annual Technical Conference (USENIX ATC 21)},
  year      = {2021},
  isbn      = {978-1-939133-23-6},
  pages     = {489--502},
  url       = {https://www.usenix.org/conference/atc21/presentation/zou},
  publisher = {USENIX Association},
  month     = jul
}


@inproceedings{FitM,
  journal      = {Proceedings 2022 Workshop on Binary Analysis Research},
  organization = {Workshop on Binary Analysis Research},
  doi          = {10.14722/bar.2022.23008},
  publisher    = {Internet Society},
  title        = {FitM: Binary-Only Coverage-Guided Fuzzing for Stateful Network Protocols},
  url          = {http://dx.doi.org/10.14722/bar.2022.23008},
  author       = {Maier, Dominik and Bittner, Otto and Beier, Julian and Munier, Marc},
  date         = {2022},
  year         = {2022}
}

